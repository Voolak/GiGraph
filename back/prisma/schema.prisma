// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    binaryTargets   = ["native", "linux-musl"]
    previewFeatures = ["filterJson"]
}

datasource db {
    provider = "mysql"
    url      = "mysql://root:@localhost:3306/db_gigraph"
}

model User {
    id         Int        @id @default(autoincrement())
    created_at DateTime   @default(now())
    firstname  String?
    lastname   String?
    email      String     @unique
    password   String
    exchanges  Exchange[]
    documents  Document[]
}

model Session {
    id        String   @id
    sid       String   @unique
    data      String
    expiresAt DateTime
}

model Prompt {
    id         Int      @id @default(autoincrement())
    entry      String
    exchange   Exchange @relation(fields: [exchangeId], references: [id])
    exchangeId Int
    created_at DateTime @default(now())
}

model Answer {
    id         Int      @id @default(autoincrement())
    output     String
    exchange   Exchange @relation(fields: [exchangeId], references: [id])
    exchangeId Int
    created_at DateTime @default(now())
}

model Graph {
    id         Int      @id @default(autoincrement())
    type       String
    code       String
    data       String   @default("{}")
    exchange   Exchange @relation(fields: [exchangeId], references: [id])
    exchangeId Int
    created_at DateTime @default(now())
}

model Document {
    id               Int                @id @default(autoincrement())
    name             String
    created_at       DateTime           @default(now())
    directory        String
    exchanges        Exchange[]         @relation(name: "ExchangeDocument")
    User             User?              @relation(fields: [userId], references: [id])
    userId           Int?
    ExchangeDocument ExchangeDocument[]
}

model Exchange {
    id               Int                @id @default(autoincrement())
    prompts          Prompt[]
    answers          Answer[]
    graphs           Graph[]
    documents        Document[]         @relation(name: "ExchangeDocument")
    user             User               @relation(fields: [userId], references: [id])
    userId           Int
    ExchangeDocument ExchangeDocument[]
}

enum ProcessStatus {
    PROCESSED
    NOT_PROCESSED
}

model ExchangeDocument {
    id         Int           @id @default(autoincrement())
    exchange   Exchange      @relation(fields: [exchangeId], references: [id])
    exchangeId Int
    document   Document      @relation(fields: [documentId], references: [id])
    documentId Int
    processed  ProcessStatus @default(NOT_PROCESSED)

    @@map(name: "exchange_document")
}
